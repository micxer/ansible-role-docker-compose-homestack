#!/bin/bash

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# logging function
source {{ homestack_backup_script_path }}/container_backup_common.sh

# Function to disable maintenance mode and exit
cleanup() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_message "An error occurred during backup (exit code: $exit_code)" default
    fi
    
    log_message "Disabling maintenance mode for Nextcloud"
    if ! docker exec -u {{ nextcloud_uid }} nextcloud php occ maintenance:mode --off; then
        log_message "Failed to disable maintenance mode on cleanup" default
    fi
    
    exit $exit_code
}

# Register the cleanup function to run on script exit
trap cleanup EXIT

# check that containers are running
if ! docker ps --filter name=nc-db | grep -q "nc-db"
then
    log_message "Nextcloud database container is not running" default
    exit 1
fi

if ! docker ps --filter name=nextcloud | grep -q "nextcloud"
then
    log_message "Nextcloud container is not running" default
    exit 1
fi

# Set maintenance mode
log_message "Enabling maintenance mode for Nextcloud"
if ! docker exec -u {{ nextcloud_uid }} nextcloud php occ maintenance:mode --on
then
    log_message "Failed to enable maintenance mode" default
    exit 1
fi

log_message "Creating backup of Nextcloud database"

# Create backup directory
if ! mkdir -p "{{ appdata_path }}/nextcloud/db-backup"
then
    log_message "Failed to create backup directory" default
    exit 1
fi

# Check available disk space before backup
required_space_mb=100  # Adjust based on your typical backup size
available_space_mb=$(df -m "{{ appdata_path }}/nextcloud" | awk 'NR==2 {print $4}')

if [ "$available_space_mb" -lt "$required_space_mb" ]; then
    log_message "Insufficient disk space for backup: ${available_space_mb}MB available, ${required_space_mb}MB required" default
    exit 1
fi

# Create gzipped DB backup
currentDate=$(date +"%Y%m%d-%H%M%S")
backupFile="{{ appdata_path }}/nextcloud/db-backup/nextcloud-db-${currentDate}.sql.gz"

# Create temporary MySQL config file
MYSQL_CNF=$(mktemp)
cat > "$MYSQL_CNF" << EOF
[client]
user=root
password={{ homestack_nextcloud_mysql_root_password }}
EOF
chmod 600 "$MYSQL_CNF"

# Copy config into container
docker cp "$MYSQL_CNF" nc-db:/tmp/backup.cnf

if ! docker exec "nc-db" /usr/bin/mariadb-dump --defaults-extra-file=/tmp/backup.cnf \
    --single-transaction --default-character-set=utf8mb4 "nextcloud" | gzip -c > "${backupFile}"; then
    docker exec nc-db rm -f /tmp/backup.cnf
    rm -f "$MYSQL_CNF"
    log_message "Failed to create backup" default
    exit 1
fi

# Clean up
docker exec nc-db rm -f /tmp/backup.cnf
rm -f "$MYSQL_CNF"

log_message "Database backup created"

# Check if ZFS is available
if ! command -v /usr/sbin/zfs &> /dev/null; then
    log_message "ZFS command not found, skipping snapshots" default
else
    log_message "Creating ZFS snapshots of Nextcloud data"
    /usr/sbin/zfs destroy "{{ zfs_pools[0].name }}/nextcloud@restic" 2>/dev/null || true
    if ! (/usr/sbin/zfs snapshot "{{ zfs_pools[0].name }}/nextcloud@${currentDate}" && 
          /usr/sbin/zfs snapshot "{{ zfs_pools[0].name }}/nextcloud@restic"); then
        log_message "Failed to create ZFS snapshots" default
        exit 1
    fi

    # TODO: Cleanup old snapshots
fi

log_message "Backup successful"
